# Generated by Django 4.0.6 on 2022-08-08 18:47

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=32, verbose_name='Hive frames')),
                ('frames', models.IntegerField(default=10, verbose_name='Hive frames')),
                ('depth', models.CharField(max_length=7, verbose_name='Hive depth')),
                ('active', models.BooleanField(default=True)),
                ('breed', models.CharField(max_length=9, verbose_name='Bee breed')),
                ('removal_date', models.DateField(blank=True, verbose_name='Date removed')),
                ('photo_url', models.CharField(blank=True, max_length=256, verbose_name='Photo URL')),
            ],
        ),
        migrations.CreateModel(
            name='Inspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4)),
                ('humidity', models.DecimalField(blank=True, decimal_places=1, max_digits=3)),
                ('pollen_type', models.CharField(blank=True, max_length=32, verbose_name='Pollen types')),
                ('pollen_count', models.IntegerField(blank=True, verbose_name='Pollen count')),
                ('queen_sight', models.BooleanField(blank=True, verbose_name='Queen sighted')),
                ('brood', models.BooleanField(blank=True, verbose_name='Capped brood or eggs')),
                ('queen_cells', models.BooleanField(blank=True, verbose_name='Queen cells')),
                ('has_swarmed', models.BooleanField(blank=True, verbose_name='Evidence of swarm')),
                ('supers', models.BooleanField(blank=True, verbose_name='Honey supers on')),
                ('feeding', models.CharField(blank=True, max_length=18)),
                ('disease', models.CharField(blank=True, max_length=64)),
                ('meds', models.CharField(blank=True, max_length=32)),
                ('notes', models.TextField(blank=True)),
                ('hive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assess5_app.hive')),
            ],
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=16, verbose_name='First name')),
                ('last_name', models.CharField(max_length=16, verbose_name='Last name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
